{"instruction": "What is Resumed?", "input": "", "output": "Resumed is a lightweight JSON Resume builder, designed as a no-frills alternative to resume-cli. It’s small (~120 LOC), written in pure ESM, and offers a CLI and Node.js API with TypeScript typings, async render support, and 100% code coverage."}
{"instruction": "How do I install Resumed?", "input": "", "output": "To install Resumed, run `npm install resumed jsonresume-theme-even` (or replace `jsonresume-theme-even` with your preferred theme). You need to install a theme separately as Resumed does not include a default theme."}
{"instruction": "What commands does Resumed support?", "input": "", "output": "Resumed supports three commands: `render` (renders a resume, default command), `init` (creates a sample resume), and `validate` (validates a resume). Use `resumed --help` for details."}
{"instruction": "How do I render a resume with a custom theme?", "input": "", "output": "To render a resume with a custom theme, use `resumed render resume.json --theme jsonresume-theme-even`, replacing `jsonresume-theme-even` with your installed theme. Alternatively, add `\"meta\": {\"theme\": \"jsonresume-theme-even\"}` to your `resume.json` and run `resumed render`."}
{"instruction": "What does the `render` command do if no theme is specified?", "input": "", "output": "If no theme is specified via the `--theme` option or the `.meta.theme` field in the resume, the `render` command will fail and output an error: 'No theme to use. Please specify one via the --theme option or the .meta.theme field of your resume.'"}
{"instruction": "How do I use Resumed to export a resume to PDF?", "input": "", "output": "Resumed doesn’t natively support PDF export, but you can use it with Puppeteer. Install Puppeteer (`npm install puppeteer resumed jsonresume-theme-even`), then use a script like the one in `examples/with-pdf-export/index.js`: render the resume to HTML with `render`, set it in a Puppeteer page, and export to PDF with `page.pdf()`."}
{"instruction": "What’s the purpose of `src/render.ts`?", "input": "", "output": "The `src/render.ts` file defines the `render` function, which takes a resume object and a theme object (with a `render` method) and returns the result of calling the theme’s `render` method on the resume. It’s a simple abstraction to support async rendering."}
{"instruction": "How does `src/cli.ts` handle theme resolution?", "input": "", "output": "In `src/cli.ts`, the `render` command checks for a theme via the `--theme` option or the `.meta.theme` field in the resume JSON. If neither is provided, it errors out. If a theme is specified, it attempts to import it dynamically with `import(themeName)`. If the import fails (e.g., theme not installed), it outputs an error and exits."}
{"instruction": "What’s the difference between Resumed and resume-cli?", "input": "", "output": "Resumed is a modern reimplementation of resume-cli, focusing on simplicity and a smaller codebase. Unlike resume-cli, it doesn’t include a default theme (you must install one), lacks features like PDF export and YAML support, but adds a Node.js API, TypeScript typings, and pure ESM. It’s easier to maintain but less feature-rich."}
{"instruction": "How do I validate a resume with Resumed?", "input": "", "output": "To validate a resume, run `resumed validate resume.json`. It checks the resume against the JSON Resume schema. If valid, it outputs a success message; if invalid, it lists errors (e.g., missing fields) and exits with a failure code."}